#!/usr/bin/env python
# Setup applications from git repositories using configuration.yaml
import os
import sys
import subprocess

paths = {
  'apps': '/vagrant/apps',
  'supervisor': '/etc/supervisord.d'
}

def say(app_name, message):
    print app_name, '-', str(message)

def gitSetup(app_name, repo, branch):
    import git
    app_path = paths['apps'] + '/' + app_name
    say(app_name,'Grabbing latest code from upstream')

    # Pull from upstream git repository
    if not os.path.exists(app_path):
        # Fresh clone
        git.Repo.clone_from(repo,app_path)
        repo = git.Repo(app_path)

        #Just in case there is a sub module
        subprocess.check_output(['git', 'submodule', 'update', '--init'], cwd=app_path)
    else:
        # Fetch latest upstream for an existing repo
        repo = git.Repo(app_path)
        try:
            repo.remotes['origin'].fetch()
            subprocess.check_output(['git', 'submodule', 'update', '--init'], cwd=app_path)
        except AssertionError:
            say(app_name,'Unable to fetch latest code as there are conflicts. Run git fetch automatically')

    # Switch git branches and create if necessary
    newbranch = None
    for b in repo.branches:
        if b.name == branch:
            newbranch = b
            say(app_name,'Using %s branch' % b.name)
    if not newbranch:
        newbranch = repo.create_head(branch)
        say(app_name,"Creating %s branch" % branch)
    repo.head.reference = newbranch

    return app_path

def supervisorTemplate():
    import jinja2

    # Configure templating
    templateLoader = jinja2.FileSystemLoader(searchpath='/vagrant/local')
    templateEnv = jinja2.Environment(loader=templateLoader)

    # Check permissions
    if not os.access(paths['supervisor'], os.W_OK):
        print >> sys.stderr, "Unable to write to %s - Ensure you have correct permissions" % paths['supervisor']
        sys.exit(1)

    return templateEnv


# Setup applications
def setup(app_name, app_conf, app_template):
    app_path = gitSetup(app_name, app_conf['repo'], app_conf['branch'])

    ini = '%s/%s.ini' % (paths['supervisor'], app_name)

    # Create log directory
    logpath = '/vagrant/logs/' + app_name
    if not os.path.exists(logpath):
        os.makedirs(logpath)

    supervisor = app_template.get_template('.genericapp.ini.j2')
    with open(ini,'w') as f:
        f.write(supervisor.render(name=app_name, path=app_path, conf=app_conf))

if __name__ == '__main__':
    # Load configuration.yaml
    import multiprocessing
    import yaml
    stream = file('/vagrant/configuration.yaml')
    config = yaml.load(stream)

    # Set up basic directory structure
    for name, path in paths.iteritems():
        if not os.path.exists(path):
            os.makedirs(path)

    template = supervisorTemplate()

    # Setup and configure applications
    for app,conf in config['applications'].iteritems():
        proc = multiprocessing.Process(target=setup, args=(app,conf,template))
        proc.start()
